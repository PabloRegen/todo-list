{"version":3,"sources":["comp/Title.js","comp/NewTaskBar.js","comp/ViewBar.js","comp/OrderByBar.js","comp/SearchBar.js","comp/UserDisplayPreference.js","comp/TotalTasksToDo.js","comp/Task.js","comp/TasksList.js","comp/ClearTasks.js","lib/viewAndOrderByOptions.js","comp/App.js","lib/amountTasksToDo.js","lib/updateTasksList.js","index.js"],"names":["Title","react_default","a","createElement","className","NewTaskBar","props","newTask","onChange","onAddNewTask","name","type","placeholder","value","onClick","ViewBar","viewOptions","viewValue","map","option","key","label","OrderByBar","orderByValue","orderByOptions","SearchBar","searchValue","UserDisplayPreference","comp_ViewBar","comp_OrderByBar","comp_SearchBar","TotalTasksToDo","totalTasksToDo","Task","task","onTaskDone","onTaskDelete","done","id","checked","e","TasksList","userPreferenceToDoList","listTasks","comp_Task","ClearTasks","onClearCompletedTasks","onClearAllTasks","App","state","todoList","handleChange","_e$target","target","_this","setState","Object","defineProperty","handleAddNewTask","preventDefault","trim","newItem","Date","now","postedOn","concat","handleTaskDone","taskId","objectSpread","handleTaskDelete","filter","handleClearCompletedTasks","handleClearAllTasks","handleLeavePage","localStorage","setItem","JSON","stringify","window","addEventListener","this","parse","getItem","removeEventListener","_this$state","comp_Title","comp_NewTaskBar","comp_UserDisplayPreference","comp_TotalTasksToDo","length","amountTasksToDo","comp_TasksList","updatedTasksList","sort","b","toLowerCase","indexOf","updateTasksList","comp_ClearTasks","Component","ReactDOM","render","comp_App","document","getElementById"],"mappings":"8OAIeA,EAFD,kBAAMC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,cCiBLC,EAjBI,SAAAC,GAAS,IACjBC,EAAoCD,EAApCC,QAASC,EAA2BF,EAA3BE,SAAUC,EAAiBH,EAAjBG,aAE1B,OACIR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACZH,EAAAC,EAAAC,cAAA,SACCC,UAAU,UACVM,KAAK,UACLC,KAAK,OACLC,YAAY,eACZC,MAAON,EACPC,SAAUA,IACXP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASU,QAASL,GAApC,SCGGM,EAfC,SAAAT,GAAS,IAChBU,EAAqCV,EAArCU,YAAaC,EAAwBX,EAAxBW,UAAWT,EAAaF,EAAbE,SAEhC,OACIP,EAAAC,EAAAC,cAAA,UACIC,UAAU,SACVM,KAAK,YACLG,MAAOI,EACPT,SAAUA,GAERQ,EAAYE,IAAI,SAAAC,GAAM,OAAIlB,EAAAC,EAAAC,cAAA,UAAQiB,IAAKD,EAAON,MAAOA,MAAOM,EAAON,OAAQM,EAAOE,WCK9EC,EAfI,SAAAhB,GAAS,IACnBiB,EAA2CjB,EAA3CiB,aAAcC,EAA6BlB,EAA7BkB,eAAgBhB,EAAaF,EAAbE,SAEtC,OACIP,EAAAC,EAAAC,cAAA,UACIC,UAAU,SACVM,KAAK,eACLG,MAAOU,EACPf,SAAUA,GAERgB,EAAeN,IAAI,SAAAC,GAAM,OAAIlB,EAAAC,EAAAC,cAAA,UAAQiB,IAAKD,EAAON,MAAOA,MAAOM,EAAON,OAAQM,EAAOE,WCKjFI,EAfG,SAAAnB,GAAS,IAClBoB,EAA0BpB,EAA1BoB,YAAalB,EAAaF,EAAbE,SAErB,OACIP,EAAAC,EAAAC,cAAA,SACIC,UAAU,SACVM,KAAK,cACLC,KAAK,SACLC,YAAY,kBACZC,MAAOa,EACPlB,SAAUA,KCaJmB,EApBe,SAAArB,GAAS,IAC3BU,EAAgFV,EAAhFU,YAAaQ,EAAmElB,EAAnEkB,eAAgBP,EAAmDX,EAAnDW,UAAWM,EAAwCjB,EAAxCiB,aAAcG,EAA0BpB,EAA1BoB,YAAalB,EAAaF,EAAbE,SAE3E,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACyB,EAAD,CACIZ,YAAaA,EACbC,UAAWA,EACXT,SAAUA,IACdP,EAAAC,EAAAC,cAAC0B,EAAD,CACIL,eAAgBA,EAChBD,aAAcA,EACdf,SAAUA,IACdP,EAAAC,EAAAC,cAAC2B,EAAD,CACIJ,YAAaA,EACblB,SAAUA,MCRXuB,EAVQ,SAAAzB,GAAS,IACxB0B,EAAkB1B,EAAlB0B,eAEP,OACI/B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,UACWH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAY4B,GADvC,IACkF,IAAnBA,EAAuB,QAAU,SADhG,WCcUC,EAlBF,SAAA3B,GAAS,IACV4B,EAAmC5B,EAAnC4B,KAAMC,EAA6B7B,EAA7B6B,WAAYC,EAAiB9B,EAAjB8B,aAClBC,EAAaH,EAAbG,KAAMC,EAAOJ,EAAPI,GAEd,OACIrC,EAAAC,EAAAC,cAAA,MAAIC,UAAWiC,EAAO,gBAAkB,oBACpCpC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACZH,EAAAC,EAAAC,cAAA,SACIQ,KAAK,WACL4B,QAASF,EACT7B,SAAU,kBAAM2B,EAAWG,MAC/BrC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgB8B,EAAKA,MACrCjC,EAAAC,EAAAC,cAAA,UAAQW,QAAS,SAAA0B,GAAC,OAAIJ,EAAaI,EAAGF,KAAtC,QCGDG,EAdG,SAAAnC,GAAS,IAClBoC,EAAoDpC,EAApDoC,uBAAwBP,EAA4B7B,EAA5B6B,WAAYC,EAAgB9B,EAAhB8B,aAEnCO,EAAYD,EAAuBxB,IAAI,SAAAgB,GAAI,OAC7CjC,EAAAC,EAAAC,cAACyC,EAAD,CACIxB,IAAKc,EAAKI,GACVJ,KAAMA,EACNC,WAAYA,EACZC,aAAcA,MAGtB,OAAOnC,EAAAC,EAAAC,cAAA,UAAKwC,ICSDE,EArBI,SAAAvC,GAAS,IAChBwC,EAA2CxC,EAA3CwC,sBAAuBC,EAAoBzC,EAApByC,gBAE/B,OACI9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,UACCC,UAAU,WACVO,KAAK,SACLG,QAASgC,GAHV,mBAMA7C,EAAAC,EAAAC,cAAA,UACCC,UAAU,WACVO,KAAK,SACLG,QAASiC,GAHV,eCbN/B,EAAc,CAChB,CAAEH,MAAO,MAAOQ,MAAO,aACvB,CAAER,MAAO,UAAWQ,MAAO,UAC3B,CAAER,MAAO,YAAaQ,MAAO,cAG3BG,EAAiB,CACnB,CAAEX,MAAO,cAAeQ,MAAO,gBAC/B,CAAER,MAAO,cAAeQ,MAAO,iBCiJpB2B,6MA7HXC,MAAQ,CACJC,SAAU,GACV3C,QAAS,GACTmB,YAAa,GACbT,UAAW,MACXM,aAAc,iBAGlB4B,aAAe,SAAAX,GAAK,IAAAY,EACQZ,EAAEa,OAAlB3C,EADQ0C,EACR1C,KAAMG,EADEuC,EACFvC,MACdyC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACK9C,EAAOG,OAIhB6C,iBAAmB,SAAAlB,GACfA,EAAEmB,iBACF,IAAMpD,EAAU+C,EAAKL,MAAM1C,QAE3B,GAAuB,KAAnBA,EAAQqD,OAAZ,CAIA,IAAMC,EAAU,CACZvB,GAAIwB,KAAKC,MACT7B,KAAM3B,EAAQqD,OACdI,SAAUF,KAAKC,MACf1B,MAAM,GAOViB,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpB1C,QAAS,GACT2C,SAAUD,EAAMC,SAASe,OAAO,CAACJ,WAIzCK,eAAiB,SAAAC,GACbb,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpBC,SAAUD,EAAMC,SAAShC,IAAI,SAAAgB,GACzB,OAAIA,EAAKI,KAAO6B,EACLX,OAAAY,EAAA,EAAAZ,CAAA,GAAKtB,EAAZ,CAAkBG,MAAOH,EAAKG,OAGvBH,UAMvBmC,iBAAmB,SAAC7B,EAAG2B,GACnB3B,EAAEmB,iBACFL,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpBC,SAAUD,EAAMC,SAASoB,OAAO,SAAApC,GAAI,OAAIA,EAAKI,KAAO6B,UAI5DI,0BAA4B,WACxBjB,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpBC,SAAUD,EAAMC,SAASoB,OAAO,SAAApC,GAAI,OAAkB,IAAdA,EAAKG,aAIrDmC,oBAAsB,WAClBlB,EAAKC,SAAS,CACVL,SAAU,QAIlBuB,gBAAkB,WACdC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUvB,EAAKL,MAAMC,+FAI3D4B,OAAOC,iBAAiB,eAAgBC,KAAKP,iBAC7CO,KAAKzB,SAAS,CACVL,SAAU0B,KAAKK,MAAMP,aAAaQ,QAAQ,cAAgB,oDAK9DJ,OAAOK,oBAAoB,eAAgBH,KAAKP,kDAQ3C,IAAAW,EAC+DJ,KAAK/B,MAAjEC,EADHkC,EACGlC,SAAU3C,EADb6E,EACa7E,QAASmB,EADtB0D,EACsB1D,YAAaT,EADnCmE,EACmCnE,UAAWM,EAD9C6D,EAC8C7D,aAEnD,OACItB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACkF,EAAD,MACApF,EAAAC,EAAAC,cAACmF,EAAD,CACI/E,QAASA,EACTC,SAAUwE,KAAK7B,aACf1C,aAAcuE,KAAKtB,mBACvBzD,EAAAC,EAAAC,cAACoF,EAAD,CACIvE,YAAaA,EACbQ,eAAgBA,EAChBP,UAAWA,EACXM,aAAcA,EACdG,YAAaA,EACblB,SAAUwE,KAAK7B,gBAEvBlD,EAAAC,EAAAC,cAACqF,EAAD,CACIxD,eC5IW,SAAAkB,GAC9B,OAAOA,EAASoB,OAAO,SAAApC,GAAI,OAAkB,IAAdA,EAAKG,OAAgBoD,OD2IjBC,CAAgBxC,KACpCjD,EAAAC,EAAAC,cAACwF,EAAD,CACIjD,uBE9IW,SAACQ,EAAUjC,EAAWM,EAAcG,GAC/D,IAAIkE,EAoBJ,OAjBIA,EADc,YAAd3E,EACmBiC,EAASoB,OAAO,SAAApC,GAAI,OAAKA,EAAKG,OAC5B,cAAdpB,EACYiC,EAASoB,OAAO,SAAApC,GAAI,OAAIA,EAAKG,OAE7Ba,EAInB0C,EADiB,gBAAjBrE,EACmBqE,EAAiBC,KAAK,SAAC3F,EAAG4F,GAAJ,OAAUA,EAAE9B,SAAW9D,EAAE8D,WAE/C4B,EAAiBC,KAAK,SAAC3F,EAAG4F,GAAJ,OAAU5F,EAAE8D,SAAW8B,EAAE9B,WAG7C,KAArBtC,EAAYkC,OACZgC,EAAmBA,EAAiBtB,OAAO,SAAApC,GAAI,OAAoE,IAAhEA,EAAKA,KAAK6D,cAAcC,QAAQtE,EAAYqE,kBAG5FH,EFyHiCK,CAAgB/C,EAAUjC,EAAWM,EAAcG,GAC3ES,WAAY6C,KAAKd,eACjB9B,aAAc4C,KAAKX,mBACvBpE,EAAAC,EAAAC,cAAC+F,EAAD,CACIpD,sBAAuBkC,KAAKT,0BAC5BxB,gBAAiBiC,KAAKR,8BAxHxB2B,mBGtBlBC,IAASC,OAAOpG,EAAAC,EAAAC,cAACmG,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.29e10e8e.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => <p className='title'>TODO LIST</p>;\n\nexport default Title;","import React from 'react';\n\nconst NewTaskBar = props => {\n    const {newTask, onChange, onAddNewTask } = props;\n\n    return (\n        <form className='flexRow'>\n            <input \n            \tclassName='newTask'\n            \tname='newTask'\n            \ttype='text'\n            \tplaceholder='I need to...'\n            \tvalue={newTask}\n            \tonChange={onChange} />\n            <button className='addBtn' onClick={onAddNewTask}>ADD</button>\n        </form>\n    );\n};\n\nexport default NewTaskBar;","import React from 'react';\n\nconst ViewBar = props => {\n\tconst { viewOptions, viewValue, onChange } = props;\n\n\treturn (\n\t    <select\n\t        className='select'\n\t        name='viewValue'\n\t        value={viewValue}\n\t        onChange={onChange}\n\t    >\n\t        { viewOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>) }\n\t    </select>\n\t);\n};\n\nexport default ViewBar;","import React from 'react';\n\nconst OrderByBar = props => {\n\tconst { orderByValue, orderByOptions, onChange } = props;\n\t\n\treturn (\n\t    <select\n\t        className='select'\n\t        name='orderByValue'\n\t        value={orderByValue}\n\t        onChange={onChange}\n\t    >\n\t        { orderByOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>) }\n\t    </select>\n\t);\n};\n\nexport default OrderByBar;","import React from 'react';\n\nconst SearchBar = props => {\n\tconst { searchValue, onChange } = props;\n\n\treturn (\n\t    <input\n\t        className='search'\n\t        name='searchValue'\n\t        type='search'\n\t        placeholder='Search tasks...'\n\t        value={searchValue}\n\t        onChange={onChange}\n\t    />\n\t);\n};\n\nexport default SearchBar;","import React from 'react';\nimport ViewBar from './ViewBar';\nimport OrderByBar from './OrderByBar';\nimport SearchBar from './SearchBar';\n\nconst UserDisplayPreference = props => {\n    const { viewOptions, orderByOptions, viewValue, orderByValue, searchValue, onChange } = props;\n\n    return (\n        <div className='flexRow'>\n            <ViewBar\n                viewOptions={viewOptions}\n                viewValue={viewValue}\n                onChange={onChange} />\n            <OrderByBar\n                orderByOptions={orderByOptions}\n                orderByValue={orderByValue}\n                onChange={onChange} />\n            <SearchBar\n                searchValue={searchValue}\n                onChange={onChange} />\n        </div>\n    );\n};\n\nexport default UserDisplayPreference;","import React from 'react';\n\nconst TotalTasksToDo = props => {\n\tconst {totalTasksToDo} = props;\n\n\treturn (\n\t    <p className='totalTasks'>\n\t        I have <span className='emphasis'>{totalTasksToDo}</span> {totalTasksToDo === 1 ? 'thing' : 'things'} to do\n\t    </p>\n\t);\n};\n\nexport default TotalTasksToDo;","import React from 'react';\n\nconst Task = props => {\n    const { task, onTaskDone, onTaskDelete } = props;\n    const { done, id } = task;\n\n    return (\n        <li className={done ? 'taskCompleted' : 'taskNotCompleted'}>\n            <form className='flexRow'>\n                <input\n                    type='checkbox'\n                    checked={done}\n                    onChange={() => onTaskDone(id)} />\n                <span className='taskFlexGrow'>{task.task}</span>\n                <button onClick={e => onTaskDelete(e, id)}>x</button>\n            </form>\n        </li>\n    );\n};\n\nexport default Task;","import React from 'react';\nimport Task from './Task';\n\nconst TasksList = props => {\n\tconst { userPreferenceToDoList, onTaskDone, onTaskDelete} = props;\n\n    const listTasks = userPreferenceToDoList.map(task => (\n        <Task\n            key={task.id}\n            task={task}\n            onTaskDone={onTaskDone}\n            onTaskDelete={onTaskDelete} />\n    ));\n    \n    return <ul>{listTasks}</ul>;\n};\n\nexport default TasksList;","import React from 'react';\n\nconst ClearTasks = props => {\n    const { onClearCompletedTasks, onClearAllTasks } = props;\n\n    return (\n        <div className='flexRow clearBtns'>\n            <button \n            \tclassName='clearBtn'\n            \ttype='submit'\n            \tonClick={onClearCompletedTasks}>\n            \tClear completed\n            </button>\n            <button\n            \tclassName='clearBtn'\n            \ttype='submit'\n            \tonClick={onClearAllTasks}>\n            \tClear all\n            </button>\n        </div>\n    );\n};\n\nexport default ClearTasks;","const viewOptions = [\n    { value: 'all', label: 'All tasks' },\n    { value: 'current', label: 'Active' },\n    { value: 'completed', label: 'Completed' }\n];\n\nconst orderByOptions = [\n    { value: 'newestFirst', label: 'Newest first' },\n    { value: 'oldestFirst', label: 'Oldest first' }\n];\n\nexport { viewOptions, orderByOptions };","/*\nComponents structure:\n\n- App\n    - Title\n    - NewTaskBar\n    - UserDisplayPreference\n        - ViewBar\n        - OrderByBar\n        - SearchBar\n    - TotalTasksToDo\n    - TaskList\n        - Task\n    - ClearTasks\n*/\n\nimport React, { Component } from 'react';\nimport Title from './Title';\nimport NewTaskBar from './NewTaskBar';\nimport UserDisplayPreference from './UserDisplayPreference';\nimport TotalTasksToDo from './TotalTasksToDo';\nimport TasksList from './TasksList';\nimport ClearTasks from './ClearTasks';\nimport { amountTasksToDo } from '../lib/amountTasksToDo';\nimport { updateTasksList } from '../lib/updateTasksList';\nimport { viewOptions, orderByOptions } from '../lib/viewAndOrderByOptions';\n\nclass App extends Component {\n    state = {\n        todoList: [],\n        newTask: '',\n        searchValue: '',\n        viewValue: 'all',\n        orderByValue: 'newestFirst'\n    }\n    \n    handleChange = e => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleAddNewTask = e => {\n        e.preventDefault();\n        const newTask = this.state.newTask;\n        \n        if (newTask.trim() === '') {\n            return;\n        }\n        \n        const newItem = {\n            id: Date.now(),\n            task: newTask.trim(),\n            postedOn: Date.now(),\n            done: false,\n            // dueOn: null,\n            // isStarred: false,\n            // color: null,\n            // notes: null,\n        };\n        \n        this.setState(state => ({\n            newTask: '', \n            todoList: state.todoList.concat([newItem]),\n        }));\n    }\n    \n    handleTaskDone = taskId => {\n        this.setState(state => ({\n            todoList: state.todoList.map(task => {\n                if (task.id === taskId) {\n                    return { ...task, done: !task.done };\n                    // or return Object.assign({}, task, { done: !task.done });\n                } else {\n                    return task;\n                }\n            })\n        }));\n    }\n    \n    handleTaskDelete = (e, taskId) => {\n        e.preventDefault();     \n        this.setState(state => ({\n            todoList: state.todoList.filter(task => task.id !== taskId)\n        }));\n    }\n    \n    handleClearCompletedTasks = () => {         \n        this.setState(state => ({ \n            todoList: state.todoList.filter(task => task.done === false)\n        }));\n    }\n\n    handleClearAllTasks = () => {\n        this.setState({\n            todoList: []\n        });\n    }\n    \n    handleLeavePage = () => {\n        localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\n    }\n\n    componentDidMount() {\n        window.addEventListener('beforeunload', this.handleLeavePage);\n        this.setState({\n            todoList: JSON.parse(localStorage.getItem('todoList')) || []\n        })\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.handleLeavePage);\n    }\n\n    /* update localStorage on each & every state change. Different results than componentWillUnmount() when opening on more than 1 tab at once */\n    // componentDidUpdate() {\n    //  localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\n    // }\n\n    render() {\n        const { todoList, newTask, searchValue, viewValue, orderByValue } = this.state;\n\n        return (\n            <div>\n                <div className='header'>\n                    <Title />\n                    <NewTaskBar\n                        newTask={newTask}\n                        onChange={this.handleChange}\n                        onAddNewTask={this.handleAddNewTask} />\n                    <UserDisplayPreference\n                        viewOptions={viewOptions}\n                        orderByOptions={orderByOptions}\n                        viewValue={viewValue}\n                        orderByValue={orderByValue}\n                        searchValue={searchValue} \n                        onChange={this.handleChange} />\n                </div>\n                <TotalTasksToDo\n                    totalTasksToDo={amountTasksToDo(todoList)}/>\n                <TasksList\n                    userPreferenceToDoList={updateTasksList(todoList, viewValue, orderByValue, searchValue)}\n                    onTaskDone={this.handleTaskDone}\n                    onTaskDelete={this.handleTaskDelete} />\n                <ClearTasks \n                    onClearCompletedTasks={this.handleClearCompletedTasks}\n                    onClearAllTasks={this.handleClearAllTasks} />\n            </div>\n        );\n    }\n}\n\nexport default App;","export const amountTasksToDo = todoList => {\n\treturn todoList.filter(task => task.done === false).length;\n};","export const updateTasksList = (todoList, viewValue, orderByValue, searchValue) => {\n    let updatedTasksList;\n    \n    if (viewValue === 'current') {\n        updatedTasksList = todoList.filter(task => !task.done);\n    } else if (viewValue === 'completed') {\n        updatedTasksList = todoList.filter(task => task.done);\n    } else {\n        updatedTasksList = todoList;\n    }\n    \n    if (orderByValue === 'newestFirst') {\n        updatedTasksList = updatedTasksList.sort((a, b) => b.postedOn - a.postedOn);\n    } else {\n        updatedTasksList = updatedTasksList.sort((a, b) => a.postedOn - b.postedOn);\n    }\n    \n    if (searchValue.trim !== '') {\n        updatedTasksList = updatedTasksList.filter(task => task.task.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1);\n    }\n    \n    return updatedTasksList;\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './comp/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}