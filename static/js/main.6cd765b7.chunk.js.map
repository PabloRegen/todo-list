{"version":3,"sources":["comp/Title.js","comp/NewTaskBar.js","comp/ViewBar.js","comp/OrderByBar.js","comp/SearchBar.js","comp/UserDisplayPreference.js","comp/TotalTasksToDo.js","comp/EditText.js","comp/Task.js","comp/TasksList.js","comp/ClearTasks.js","lib/viewAndOrderByOptions.js","comp/App.js","lib/amountTasksToDo.js","lib/updateTasksList.js","index.js"],"names":["Title","react_default","a","createElement","className","NewTaskBar","_ref","newTask","dueOn","onChange","onAddNewTask","name","type","placeholder","value","onClick","ViewBar","viewOptions","viewValue","map","option","key","label","OrderByBar","orderByValue","orderByOptions","SearchBar","searchValue","UserDisplayPreference","comp_ViewBar","comp_OrderByBar","comp_SearchBar","TotalTasksToDo","totalTasksToDo","EditText","text","id","onTaskEdit","onSaveEditedTask","e","onBlur","autoFocus","Task","task","onTaskDone","onTaskClicked","onTaskStarred","onTaskDelete","done","starred","isWritable","classTaskCompleted","dueOnText","moment","calendar","split","classDueToday","checked","concat","comp_EditText","TasksList","userPreferenceToDoList","listTasks","comp_Task","ClearTasks","onClearCompletedTasks","onClearAllTasks","App","state","todoList","handleChange","_e$target","target","_this","setState","Object","defineProperty","handleAddNewTask","preventDefault","_this$state","trim","newItem","Date","now","postedOn","handleTaskDone","taskId","objectSpread","handleTaskClicked","handleTaskEdit","handleSaveEditedTask","handleTaskStarred","handleTaskDelete","filter","handleClearCompletedTasks","handleClearAllTasks","handleLeavePage","localStorage","setItem","JSON","stringify","window","addEventListener","this","parse","getItem","removeEventListener","_this$state2","comp_Title","comp_NewTaskBar","comp_UserDisplayPreference","comp_TotalTasksToDo","length","amountTasksToDo","comp_TasksList","updatedTasksList","sort","b","toLowerCase","indexOf","updateTasksList","comp_ClearTasks","Component","ReactDOM","render","comp_App","document","getElementById"],"mappings":"+OAIeA,EAFD,kBAAMC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,cCsBLC,EAtBI,SAAAC,GAAgD,IAA7CC,EAA6CD,EAA7CC,QAASC,EAAoCF,EAApCE,MAAOC,EAA6BH,EAA7BG,SAAUC,EAAmBJ,EAAnBI,aAC5C,OACIT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACZH,EAAAC,EAAAC,cAAA,SACCC,UAAU,uBACVO,KAAK,UACLC,KAAK,OACLC,YAAY,eACZC,MAAOP,EACPE,SAAUA,IACXR,EAAAC,EAAAC,cAAA,SACIC,UAAU,QACVO,KAAK,QACLC,KAAK,OAELE,MAAON,EACPC,SAAUA,IACdR,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASQ,KAAK,SAASG,QAASL,GAAlD,SCJGM,EAbC,SAAAV,GAA0C,IAAvCW,EAAuCX,EAAvCW,YAAaC,EAA0BZ,EAA1BY,UAAWT,EAAeH,EAAfG,SAC1C,OACIR,EAAAC,EAAAC,cAAA,UACIC,UAAU,SACVO,KAAK,YACLG,MAAOI,EACPT,SAAUA,GAERQ,EAAYE,IAAI,SAAAC,GAAM,OAAInB,EAAAC,EAAAC,cAAA,UAAQkB,IAAKD,EAAON,MAAOA,MAAOM,EAAON,OAAQM,EAAOE,WCK9EC,EAbI,SAAAjB,GAAgD,IAA7CkB,EAA6ClB,EAA7CkB,aAAcC,EAA+BnB,EAA/BmB,eAAgBhB,EAAeH,EAAfG,SACnD,OACIR,EAAAC,EAAAC,cAAA,UACIC,UAAU,SACVO,KAAK,eACLG,MAAOU,EACPf,SAAUA,GAERgB,EAAeN,IAAI,SAAAC,GAAM,OAAInB,EAAAC,EAAAC,cAAA,UAAQkB,IAAKD,EAAON,MAAOA,MAAOM,EAAON,OAAQM,EAAOE,WCKjFI,EAbG,SAAApB,GAA+B,IAA5BqB,EAA4BrB,EAA5BqB,YAAalB,EAAeH,EAAfG,SACjC,OACIR,EAAAC,EAAAC,cAAA,SACIC,UAAU,SACVO,KAAK,cACLC,KAAK,SACLC,YAAY,kBACZC,MAAOa,EACPlB,SAAUA,KCaJmB,EAlBe,SAAAtB,GAAqF,IAAlFW,EAAkFX,EAAlFW,YAAaQ,EAAqEnB,EAArEmB,eAAgBP,EAAqDZ,EAArDY,UAAWM,EAA0ClB,EAA1CkB,aAAcG,EAA4BrB,EAA5BqB,YAAalB,EAAeH,EAAfG,SAChG,OACIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAC0B,EAAD,CACIZ,YAAaA,EACbC,UAAWA,EACXT,SAAUA,IACdR,EAAAC,EAAAC,cAAC2B,EAAD,CACIL,eAAgBA,EAChBD,aAAcA,EACdf,SAAUA,IACdR,EAAAC,EAAAC,cAAC4B,EAAD,CACIJ,YAAaA,EACblB,SAAUA,MCRXuB,EARQ,SAAA1B,GAAsB,IAApB2B,EAAoB3B,EAApB2B,eACxB,OACIhC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,UACWH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAY6B,GADvC,IACkF,IAAnBA,EAAuB,QAAU,SADhG,2BCQUC,EAVE,SAAA5B,GAAA,IAAG6B,EAAH7B,EAAG6B,KAAMC,EAAT9B,EAAS8B,GAAIC,EAAb/B,EAAa+B,WAAYC,EAAzBhC,EAAyBgC,iBAAzB,OACbrC,EAAAC,EAAAC,cAAA,SACIC,UAAU,WACVQ,KAAK,OACLE,MAAOqB,EACP1B,SAAU,SAAA8B,GAAC,OAAIF,EAAWE,EAAGH,IAC7BI,OAAQ,SAAAD,GAAC,OAAID,EAAiBC,EAAGH,IACjCK,WAAS,KCsCFC,EA3CF,SAAApC,GAAoG,IAAjGqC,EAAiGrC,EAAjGqC,KAAMC,EAA2FtC,EAA3FsC,WAAYC,EAA+EvC,EAA/EuC,cAAeR,EAAgE/B,EAAhE+B,WAAYC,EAAoDhC,EAApDgC,iBAAkBQ,EAAkCxC,EAAlCwC,cAAeC,EAAmBzC,EAAnByC,aAClFZ,EAA+CQ,EAA/CR,KAAMa,EAAyCL,EAAzCK,KAAMxC,EAAmCmC,EAAnCnC,MAAOyC,EAA4BN,EAA5BM,QAASb,EAAmBO,EAAnBP,GAAIc,EAAeP,EAAfO,WAClCC,EAAsBH,EAAO,gBAAkB,GAC/CI,EAAuB,KAAV5C,EAAe,GAAK6C,IAAO7C,EAAO,cAAc8C,WAAWC,MAAM,OAAO,GACrFC,EAA+B,UAAdJ,EAAwB,WAAa,GAE5D,OACInD,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACZH,EAAAC,EAAAC,cAAA,SACIS,KAAK,WACL6C,QAAST,EACTvC,SAAU,kBAAMmC,EAAWR,MAC/BnC,EAAAC,EAAAC,cAAA,QACIC,UAAS,gBAAAsD,OAAkBP,IAC1BD,EACKjD,EAAAC,EAAAC,cAACwD,EAAD,CACExB,KAAMA,EACNC,GAAIA,EACJC,WAAYA,EACZC,iBAAkBA,IACpBrC,EAAAC,EAAAC,cAAA,QAAMY,QAAS,kBAAM8B,EAAcT,KAAMD,IAGnDlC,EAAAC,EAAAC,cAAA,QACIC,UAAS,GAAAsD,OAAKP,EAAL,KAAAO,OAA2BF,IACnCJ,GAELnD,EAAAC,EAAAC,cAAA,SACIC,UAAU,OACVQ,KAAK,WACL6C,QAASR,EACTxC,SAAU,kBAAMqC,EAAcV,MAClCnC,EAAAC,EAAAC,cAAA,UACIS,KAAK,SACLG,QAAS,SAAAwB,GAAC,OAAIQ,EAAaR,EAAGH,KAFlC,QClBDwB,EAhBG,SAAAtD,GAAsH,IAAnHuD,EAAmHvD,EAAnHuD,uBAAwBjB,EAA2FtC,EAA3FsC,WAAYC,EAA+EvC,EAA/EuC,cAAeR,EAAgE/B,EAAhE+B,WAAYC,EAAoDhC,EAApDgC,iBAAkBQ,EAAkCxC,EAAlCwC,cAAeC,EAAmBzC,EAAnByC,aAC3Ge,EAAYD,EAAuB1C,IAAI,SAAAwB,GAAI,OAC7C1C,EAAAC,EAAAC,cAAC4D,EAAD,CACI1C,IAAKsB,EAAKP,GACVO,KAAMA,EACNC,WAAYA,EACZC,cAAeA,EACfR,WAAYA,EACZC,iBAAkBA,EAClBQ,cAAeA,EACfC,aAAcA,MAGtB,OAAO9C,EAAAC,EAAAC,cAAA,UAAK2D,ICKDE,EAnBI,SAAA1D,GAAgD,IAA7C2D,EAA6C3D,EAA7C2D,sBAAuBC,EAAsB5D,EAAtB4D,gBACzC,OACIjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,UACCC,UAAU,WACVQ,KAAK,SACLG,QAASkD,GAHV,mBAMAhE,EAAAC,EAAAC,cAAA,UACCC,UAAU,WACVQ,KAAK,SACLG,QAASmD,GAHV,eCXNjD,EAAc,CAChB,CAAEH,MAAO,MAAOQ,MAAO,aACvB,CAAER,MAAO,UAAWQ,MAAO,UAC3B,CAAER,MAAO,YAAaQ,MAAO,aAC7B,CAAER,MAAO,UAAWQ,MAAO,WAC3B,CAAER,MAAO,aAAcQ,MAAO,eAC9B,CAAER,MAAO,QAASQ,MAAO,SACzB,CAAER,MAAO,WAAYQ,MAAO,cAG1BG,EAAiB,CACnB,CAAEX,MAAO,cAAeQ,MAAO,gBAC/B,CAAER,MAAO,cAAeQ,MAAO,gBAC/B,CAAER,MAAO,aAAcQ,MAAO,qBAC9B,CAAER,MAAO,WAAYQ,MAAO,oBCuMjB6C,6MAzLXC,MAAQ,CACJC,SAAU,GACV9D,QAAS,GACTC,MAAO,GACPmB,YAAa,GACbT,UAAW,MACXM,aAAc,iBAGlB8C,aAAe,SAAA/B,GAAK,IAAAgC,EACQhC,EAAEiC,OAAlB7D,EADQ4D,EACR5D,KAAMG,EADEyD,EACFzD,MAEd2D,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKhE,EAAOG,OAIhB+D,iBAAmB,SAAAtC,GACfA,EAAEuC,iBADkB,IAAAC,EAEON,EAAKL,MAAxB7D,EAFYwE,EAEZxE,QAASC,EAFGuE,EAEHvE,MAEjB,GAAuB,KAAnBD,EAAQyE,OAAZ,CAIA,IAAMC,EAAU,CACZ7C,GAAI8C,KAAKC,MACThD,KAAM5B,EAAQyE,OACdI,SAAUF,KAAKC,MACfnC,MAAM,EACNxC,MAAOA,EACPyC,SAAS,EACTC,YAAY,GAKhBuB,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpB7D,QAAS,GACTC,MAAO,GACP6D,SAAUD,EAAMC,SAASX,OAAO,CAACuB,WAIzCI,eAAiB,SAAAC,GACbb,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpBC,SAAUD,EAAMC,SAASlD,IAAI,SAAAwB,GACzB,OAAIA,EAAKP,KAAOkD,EACLX,OAAAY,EAAA,EAAAZ,CAAA,GAAKhC,EAAZ,CAAkBK,MAAOL,EAAKK,OAGvBL,UAMvB6C,kBAAoB,SAAAF,GAChBb,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpBC,SAAUD,EAAMC,SAASlD,IAAI,SAAAwB,GACzB,OAAIA,EAAKP,KAAOkD,EACLX,OAAAY,EAAA,EAAAZ,CAAA,GAAKhC,EAAZ,CAAkBO,YAAY,IAEvBP,UAMvB8C,eAAiB,SAAClD,EAAG+C,GAAW,IACpBxE,EAAUyB,EAAEiC,OAAZ1D,MAER2D,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpBC,SAAUD,EAAMC,SAASlD,IAAI,SAAAwB,GACzB,OAAIA,EAAKP,KAAOkD,EACLX,OAAAY,EAAA,EAAAZ,CAAA,GAAKhC,EAAZ,CAAkBR,KAAMrB,IAEjB6B,UAMvB+C,qBAAuB,SAACnD,EAAG+C,GACvB/C,EAAEuC,iBACFL,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpBC,SAAUD,EAAMC,SAASlD,IAAI,SAAAwB,GACzB,OAAIA,EAAKP,KAAOkD,EACLX,OAAAY,EAAA,EAAAZ,CAAA,GAAKhC,EAAZ,CAAkBO,YAAY,IAEvBP,UAMvBgD,kBAAoB,SAAAL,GAChBb,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpBC,SAAUD,EAAMC,SAASlD,IAAI,SAAAwB,GACzB,OAAIA,EAAKP,KAAOkD,EACLX,OAAAY,EAAA,EAAAZ,CAAA,GAAKhC,EAAZ,CAAkBM,SAAUN,EAAKM,UAE1BN,UAMvBiD,iBAAmB,SAACrD,EAAG+C,GACnB/C,EAAEuC,iBACFL,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpBC,SAAUD,EAAMC,SAASwB,OAAO,SAAAlD,GAAI,OAAIA,EAAKP,KAAOkD,UAI5DQ,0BAA4B,WACxBrB,EAAKC,SAAS,SAAAN,GAAK,MAAK,CACpBC,SAAUD,EAAMC,SAASwB,OAAO,SAAAlD,GAAI,OAAkB,IAAdA,EAAKK,aAIrD+C,oBAAsB,WAClBtB,EAAKC,SAAS,CACVL,SAAU,QAIlB2B,gBAAkB,WACdC,aAAaC,QAAQ,WAAYC,KAAKC,UAAU3B,EAAKL,MAAMC,+FAI3DgC,OAAOC,iBAAiB,eAAgBC,KAAKP,iBAC7CO,KAAK7B,SAAS,CACVL,SAAU8B,KAAKK,MAAMP,aAAaQ,QAAQ,cAAgB,oDAK9DJ,OAAOK,oBAAoB,eAAgBH,KAAKP,kDAQ3C,IAAAW,EACsEJ,KAAKnC,MAAxEC,EADHsC,EACGtC,SAAU9D,EADboG,EACapG,QAASC,EADtBmG,EACsBnG,MAAOmB,EAD7BgF,EAC6BhF,YAAaT,EAD1CyF,EAC0CzF,UAAWM,EADrDmF,EACqDnF,aAE1D,OACIvB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACyG,EAAD,MACA3G,EAAAC,EAAAC,cAAC0G,EAAD,CACItG,QAASA,EACTC,MAAOA,EACPC,SAAU8F,KAAKjC,aACf5D,aAAc6F,KAAK1B,mBACvB5E,EAAAC,EAAAC,cAAC2G,EAAD,CACI7F,YAAaA,EACbQ,eAAgBA,EAChBP,UAAWA,EACXM,aAAcA,EACdG,YAAaA,EACblB,SAAU8F,KAAKjC,gBAEvBrE,EAAAC,EAAAC,cAAC4G,EAAD,CACI9E,eCpMW,SAAAoC,GAC9B,OAAOA,EAASwB,OAAO,SAAAlD,GAAI,OAAkB,IAAdA,EAAKK,OAAgBgE,ODmMjBC,CAAgB5C,KACpCpE,EAAAC,EAAAC,cAAC+G,EAAD,CACIrD,uBEpMW,SAACQ,EAAUnD,EAAWM,EAAcG,GAC/D,IAAIwF,EAgCJ,OA7BIA,EADc,YAAdjG,EACmBmD,EAASwB,OAAO,SAAAlD,GAAI,OAAKA,EAAKK,OAC5B,cAAd9B,EACYmD,EAASwB,OAAO,SAAAlD,GAAI,OAAIA,EAAKK,OAC3B,YAAd9B,EACYmD,EAASwB,OAAO,SAAAlD,GAAI,OAAIA,EAAKM,UAC3B,eAAd/B,EACYmD,EAASwB,OAAO,SAAAlD,GAAI,OAAKA,EAAKM,UAC5B,UAAd/B,EACYmD,EAASwB,OAAO,SAAAlD,GAAI,OAAIA,EAAKnC,QAC3B,aAAdU,EACYmD,EAASwB,OAAO,SAAAlD,GAAI,OAAKA,EAAKnC,QAE9B6D,EAInB8C,EADiB,gBAAjB3F,EACmB2F,EAAiBC,KAAK,SAAClH,EAAGmH,GAAJ,OAAUA,EAAEjC,SAAWlF,EAAEkF,WAC1C,gBAAjB5D,EACY2F,EAAiBC,KAAK,SAAClH,EAAGmH,GAAJ,OAAUnH,EAAEkF,SAAWiC,EAAEjC,WAC1C,eAAjB5D,EACY2F,EAAiBC,KAAK,SAAClH,EAAGmH,GAAJ,OAAUhE,IAAOnD,EAAEM,OAAS6C,IAAOgE,EAAE7G,SAE3D2G,EAAiBC,KAAK,SAAClH,EAAGmH,GAAJ,OAAUhE,IAAOgE,EAAE7G,OAAS6C,IAAOnD,EAAEM,SAGzD,KAArBmB,EAAYqD,OACZmC,EAAmBA,EAAiBtB,OAAO,SAAAlD,GAAI,OAAoE,IAAhEA,EAAKR,KAAKmF,cAAcC,QAAQ5F,EAAY2F,kBAG5FH,EFmKiCK,CAAgBnD,EAAUnD,EAAWM,EAAcG,GAC3EiB,WAAY2D,KAAKlB,eACjBxC,cAAe0D,KAAKf,kBACpBnD,WAAYkE,KAAKd,eACjBnD,iBAAkBiE,KAAKb,qBACvB5C,cAAeyD,KAAKZ,kBACpB5C,aAAcwD,KAAKX,mBACvB3F,EAAAC,EAAAC,cAACsH,EAAD,CACIxD,sBAAuBsC,KAAKT,0BAC5B5B,gBAAiBqC,KAAKR,8BApLxB2B,mBGtBlBC,IAASC,OAAO3H,EAAAC,EAAAC,cAAC0H,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.6cd765b7.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => <p className='title'>TODO LIST</p>;\n\nexport default Title;","import React from 'react';\n\nconst NewTaskBar = ({ newTask, dueOn, onChange, onAddNewTask }) => {\n    return (\n        <form className='flexRow'>\n            <input \n            \tclassName='newTask taskFlexGrow'\n            \tname='newTask'\n            \ttype='text'\n            \tplaceholder='I need to...'\n            \tvalue={newTask}\n            \tonChange={onChange} />\n            <input \n                className='dueOn'\n                name='dueOn'\n                type='date'\n                // placeholder='due...'\n                value={dueOn}\n                onChange={onChange} />\n            <button className='addBtn' type='button' onClick={onAddNewTask}>ADD</button>\n        </form>\n    );\n};\n\nexport default NewTaskBar;","import React from 'react';\n\nconst ViewBar = ({ viewOptions, viewValue, onChange }) => {\n\treturn (\n\t    <select\n\t        className='select'\n\t        name='viewValue'\n\t        value={viewValue}\n\t        onChange={onChange}\n\t    >\n\t        { viewOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>) }\n\t    </select>\n\t);\n};\n\nexport default ViewBar;","import React from 'react';\n\nconst OrderByBar = ({ orderByValue, orderByOptions, onChange }) => {\t\n\treturn (\n\t    <select\n\t        className='select'\n\t        name='orderByValue'\n\t        value={orderByValue}\n\t        onChange={onChange}\n\t    >\n\t        { orderByOptions.map(option => <option key={option.value} value={option.value}>{option.label}</option>) }\n\t    </select>\n\t);\n};\n\nexport default OrderByBar;","import React from 'react';\n\nconst SearchBar = ({ searchValue, onChange }) => {\n\treturn (\n\t    <input\n\t        className='search'\n\t        name='searchValue'\n\t        type='search'\n\t        placeholder='Search tasks...'\n\t        value={searchValue}\n\t        onChange={onChange}\n\t    />\n\t);\n};\n\nexport default SearchBar;","import React from 'react';\nimport ViewBar from './ViewBar';\nimport OrderByBar from './OrderByBar';\nimport SearchBar from './SearchBar';\n\nconst UserDisplayPreference = ({ viewOptions, orderByOptions, viewValue, orderByValue, searchValue, onChange }) => {\n    return (\n        <div className='flexRow'>\n            <ViewBar\n                viewOptions={viewOptions}\n                viewValue={viewValue}\n                onChange={onChange} />\n            <OrderByBar\n                orderByOptions={orderByOptions}\n                orderByValue={orderByValue}\n                onChange={onChange} />\n            <SearchBar\n                searchValue={searchValue}\n                onChange={onChange} />\n        </div>\n    );\n};\n\nexport default UserDisplayPreference;","import React from 'react';\n\nconst TotalTasksToDo = ({totalTasksToDo}) => {\n\treturn (\n\t    <p className='totalTasks'>\n\t        I have <span className='emphasis'>{totalTasksToDo}</span> {totalTasksToDo === 1 ? 'thing' : 'things'} to do\n\t    </p>\n\t);\n};\n\nexport default TotalTasksToDo;","import React from 'react';\n\nconst EditText = ({ text, id, onTaskEdit, onSaveEditedTask }) => (\n    <input\n        className='editText'\n        type='text'\n        value={text}\n        onChange={e => onTaskEdit(e, id)}\n        onBlur={e => onSaveEditedTask(e, id)} \n        autoFocus />\n);\n\nexport default EditText;","import React from 'react';\nimport moment from 'moment';\nimport EditText from './EditText';\n\nconst Task = ({ task, onTaskDone, onTaskClicked, onTaskEdit, onSaveEditedTask, onTaskStarred, onTaskDelete }) => {\n    const { text, done, dueOn, starred, id, isWritable } = task;\n    const classTaskCompleted = (done ? 'taskCompleted' : '');\n    const dueOnText = (dueOn === '' ? '' : moment(dueOn, 'YYYY-MM-DD').calendar().split(' at')[0]);\n    const classDueToday = (dueOnText === 'Today' ? 'dueToday' : '');\n\n    return (\n        <li>\n            <form className='flexRow'>\n                <input \n                    type='checkbox'\n                    checked={done}\n                    onChange={() => onTaskDone(id)} />\n                <span\n                    className={`taskFlexGrow ${classTaskCompleted}`}>\n                    {isWritable\n                        ? <EditText\n                            text={text}\n                            id={id}\n                            onTaskEdit={onTaskEdit}\n                            onSaveEditedTask={onSaveEditedTask} />\n                        : <span onClick={() => onTaskClicked(id)}>{text}</span>\n                    }\n                </span>\n                <span\n                    className={`${classTaskCompleted} ${classDueToday}`}>\n                    {dueOnText}\n                </span>\n                <input\n                    className='star'\n                    type='checkbox'\n                    checked={starred}\n                    onChange={() => onTaskStarred(id)} />\n                <button\n                    type='button'\n                    onClick={e => onTaskDelete(e, id)}>\n                    x\n                </button>\n            </form>\n        </li>\n    );\n};\n\nexport default Task;","import React from 'react';\nimport Task from './Task';\n\nconst TasksList = ({ userPreferenceToDoList, onTaskDone, onTaskClicked, onTaskEdit, onSaveEditedTask, onTaskStarred, onTaskDelete }) => {\n    const listTasks = userPreferenceToDoList.map(task => (\n        <Task\n            key={task.id}\n            task={task}\n            onTaskDone={onTaskDone}\n            onTaskClicked={onTaskClicked}\n            onTaskEdit={onTaskEdit}\n            onSaveEditedTask={onSaveEditedTask}\n            onTaskStarred={onTaskStarred}\n            onTaskDelete={onTaskDelete} />\n    ));\n    \n    return <ul>{listTasks}</ul>;\n};\n\nexport default TasksList;","import React from 'react';\n\nconst ClearTasks = ({ onClearCompletedTasks, onClearAllTasks }) => {\n    return (\n        <div className='flexRow clearBtns'>\n            <button \n            \tclassName='clearBtn'\n            \ttype='button'\n            \tonClick={onClearCompletedTasks}>\n            \tClear completed\n            </button>\n            <button\n            \tclassName='clearBtn'\n            \ttype='button'\n            \tonClick={onClearAllTasks}>\n            \tClear all\n            </button>\n        </div>\n    );\n};\n\nexport default ClearTasks;","const viewOptions = [\n    { value: 'all', label: 'All tasks' },\n    { value: 'current', label: 'Active' },\n    { value: 'completed', label: 'Completed' },\n    { value: 'starred', label: 'Starred' },\n    { value: 'notStarred', label: 'Not starred' },\n    { value: 'dated', label: 'Dated' },\n    { value: 'notDated', label: 'Not dated' }\n];\n\nconst orderByOptions = [\n    { value: 'newestFirst', label: 'Newest first' },\n    { value: 'oldestFirst', label: 'Oldest first' },\n    { value: 'dueEarlier', label: 'Due earlier first' },\n    { value: 'dueLater', label: 'Due later first' }\n];\n\nexport { viewOptions, orderByOptions };","/*\nComponents structure:\n\n- App\n    - Title\n    - NewTaskBar\n    - UserDisplayPreference\n        - ViewBar\n        - OrderByBar\n        - SearchBar\n    - TotalTasksToDo\n    - TaskList\n        - Task\n    - ClearTasks\n*/\n\nimport React, { Component } from 'react';\nimport Title from './Title';\nimport NewTaskBar from './NewTaskBar';\nimport UserDisplayPreference from './UserDisplayPreference';\nimport TotalTasksToDo from './TotalTasksToDo';\nimport TasksList from './TasksList';\nimport ClearTasks from './ClearTasks';\nimport { amountTasksToDo } from '../lib/amountTasksToDo';\nimport { updateTasksList } from '../lib/updateTasksList';\nimport { viewOptions, orderByOptions } from '../lib/viewAndOrderByOptions';\n\nclass App extends Component {\n    state = {\n        todoList: [],\n        newTask: '',\n        dueOn: '',\n        searchValue: '',\n        viewValue: 'all',\n        orderByValue: 'newestFirst'\n    }\n    \n    handleChange = e => {\n        const { name, value } = e.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    handleAddNewTask = e => {\n        e.preventDefault();\n        const { newTask, dueOn } = this.state;\n        \n        if (newTask.trim() === '') {\n            return;\n        }\n        \n        const newItem = {\n            id: Date.now(),\n            text: newTask.trim(),\n            postedOn: Date.now(),\n            done: false,\n            dueOn: dueOn,\n            starred: false,\n            isWritable: false,\n            // color: null,\n            // notes: null,\n        };\n        \n        this.setState(state => ({\n            newTask: '',\n            dueOn: '',\n            todoList: state.todoList.concat([newItem]),\n        }));\n    }\n    \n    handleTaskDone = taskId => {\n        this.setState(state => ({\n            todoList: state.todoList.map(task => {\n                if (task.id === taskId) {\n                    return { ...task, done: !task.done };\n                    // or return Object.assign({}, task, { done: !task.done });\n                } else {\n                    return task;\n                }\n            })\n        }));\n    }\n\n    handleTaskClicked = taskId => {\n        this.setState(state => ({\n            todoList: state.todoList.map(task => {\n                if (task.id === taskId) {\n                    return { ...task, isWritable: true };\n                } else {\n                    return task;\n                }\n            })\n        }));\n    }\n\n    handleTaskEdit = (e, taskId) => {\n        const { value } = e.target;\n\n        this.setState(state => ({\n            todoList: state.todoList.map(task => {\n                if (task.id === taskId) {\n                    return { ...task, text: value };\n                } else {\n                    return task;\n                }\n            })\n        }));\n    }\n\n    handleSaveEditedTask = (e, taskId) => {\n        e.preventDefault();\n        this.setState(state => ({\n            todoList: state.todoList.map(task => {\n                if (task.id === taskId) {\n                    return { ...task, isWritable: false };\n                } else {\n                    return task;\n                }\n            })\n        }));\n    }\n\n    handleTaskStarred = taskId => {\n        this.setState(state => ({\n            todoList: state.todoList.map(task => {\n                if (task.id === taskId) {\n                    return { ...task, starred: !task.starred };\n                } else {\n                    return task;\n                }\n            })\n        }));\n    }\n    \n    handleTaskDelete = (e, taskId) => {\n        e.preventDefault();     \n        this.setState(state => ({\n            todoList: state.todoList.filter(task => task.id !== taskId)\n        }));\n    }\n    \n    handleClearCompletedTasks = () => {         \n        this.setState(state => ({ \n            todoList: state.todoList.filter(task => task.done === false)\n        }));\n    }\n\n    handleClearAllTasks = () => {\n        this.setState({\n            todoList: []\n        });\n    }\n    \n    handleLeavePage = () => {\n        localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\n    }\n\n    componentDidMount() {\n        window.addEventListener('beforeunload', this.handleLeavePage);\n        this.setState({\n            todoList: JSON.parse(localStorage.getItem('todoList')) || []\n        })\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.handleLeavePage);\n    }\n\n    /* update localStorage on each & every state change. Different results than componentWillUnmount() when opening on more than 1 tab at once */\n    // componentDidUpdate() {\n    //  localStorage.setItem('todoList', JSON.stringify(this.state.todoList));\n    // }\n\n    render() {\n        const { todoList, newTask, dueOn, searchValue, viewValue, orderByValue } = this.state;\n\n        return (\n            <div>\n                <div className='header'>\n                    <Title />\n                    <NewTaskBar\n                        newTask={newTask}\n                        dueOn={dueOn}\n                        onChange={this.handleChange}\n                        onAddNewTask={this.handleAddNewTask} />\n                    <UserDisplayPreference\n                        viewOptions={viewOptions}\n                        orderByOptions={orderByOptions}\n                        viewValue={viewValue}\n                        orderByValue={orderByValue}\n                        searchValue={searchValue} \n                        onChange={this.handleChange} />\n                </div>\n                <TotalTasksToDo\n                    totalTasksToDo={amountTasksToDo(todoList)} />\n                <TasksList\n                    userPreferenceToDoList={updateTasksList(todoList, viewValue, orderByValue, searchValue)}\n                    onTaskDone={this.handleTaskDone}\n                    onTaskClicked={this.handleTaskClicked}\n                    onTaskEdit={this.handleTaskEdit}\n                    onSaveEditedTask={this.handleSaveEditedTask}\n                    onTaskStarred={this.handleTaskStarred}\n                    onTaskDelete={this.handleTaskDelete} />\n                <ClearTasks\n                    onClearCompletedTasks={this.handleClearCompletedTasks}\n                    onClearAllTasks={this.handleClearAllTasks} />\n            </div>\n        );\n    }\n}\n\nexport default App;","export const amountTasksToDo = todoList => {\n\treturn todoList.filter(task => task.done === false).length;\n};","import moment from 'moment';\n\nexport const updateTasksList = (todoList, viewValue, orderByValue, searchValue) => {\n    let updatedTasksList;\n    \n    if (viewValue === 'current') {\n        updatedTasksList = todoList.filter(task => !task.done);\n    } else if (viewValue === 'completed') {\n        updatedTasksList = todoList.filter(task => task.done);\n    } else if (viewValue === 'starred') {\n        updatedTasksList = todoList.filter(task => task.starred);\n    } else if (viewValue === 'notStarred') {\n        updatedTasksList = todoList.filter(task => !task.starred);\n    } else if (viewValue === 'dated') {\n        updatedTasksList = todoList.filter(task => task.dueOn);\n    } else if (viewValue === 'notDated') {\n        updatedTasksList = todoList.filter(task => !task.dueOn);\n    } else {\n        updatedTasksList = todoList;\n    }\n    \n    if (orderByValue === 'newestFirst') {\n        updatedTasksList = updatedTasksList.sort((a, b) => b.postedOn - a.postedOn);\n    } else if (orderByValue === 'oldestFirst') {\n        updatedTasksList = updatedTasksList.sort((a, b) => a.postedOn - b.postedOn);\n    } else if (orderByValue === 'dueEarlier') {\n        updatedTasksList = updatedTasksList.sort((a, b) => moment(a.dueOn) - moment(b.dueOn));\n    } else {\n        updatedTasksList = updatedTasksList.sort((a, b) => moment(b.dueOn) - moment(a.dueOn));\n    }\n\n    if (searchValue.trim !== '') {\n        updatedTasksList = updatedTasksList.filter(task => task.text.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1);\n    }\n    \n    return updatedTasksList;\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './comp/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}